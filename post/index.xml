<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kariyasu&#39;s Blog</title>
    <link>https://lambent-tanuki-9903f7.netlify.app/post/</link>
    <description>Recent content in Posts on Kariyasu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Sep 2022 22:03:51 +0800</lastBuildDate><atom:link href="https://lambent-tanuki-9903f7.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>『一把裁纸刀』第零期 - 我想做一档个人的周刊</title>
      <link>https://lambent-tanuki-9903f7.netlify.app/post/wp-00/</link>
      <pubDate>Sat, 17 Sep 2022 22:03:51 +0800</pubDate>
      
      <guid>https://lambent-tanuki-9903f7.netlify.app/post/wp-00/</guid>
      <description>动机 如果用一句话来总结这个行为的动机，我一定会说：“这事就得从很久以前说起了”。一句让人听了忍不住白一眼的废话，不过之所以有这个动机成因确实比较复杂，还是让我们扯远一点。
在大学时非常喜欢刷知乎，当时知乎的信息密度和质量相比现在是比较优秀的，在接收了许多别人的优质回答后第一次萌生出自己也可以进行内容输出的期待。自从有了渴望输出内容的想法后便开始尝试去回答一些自己熟悉的领域中的一些问题，问题的点赞数虽然不高，但是还是帮助了不少求助者，这一度令我感到新鲜的成就感和被人需要后产生的一种“存在主义虚荣”。
不知道后来是否是是兴趣的转移，又或是自我意识的成熟，我认识到我之前行为的动力是为了获取他人的关注（就像希望获得女同学注意的小学男生）。在同时对那些分享专业知识且有深度的博客非常喜欢，出于模仿在19年底我用Python建了自己第一个博客。建好博客之后却陷入了没什么东西可以分享的问题，于是又关闭了博客打算先沉淀学习。待到20年，毕业、疫情、工作的诸多事务缠身，空闲时间不是在弹弹琴就是在打游戏，根本无心运营博客。21年偷闲用hexo又搭了一个博客网站，更新频率虽然感人但是还是勉强把内容输出提上了日程。前天，在看一个大佬的博客时我突然想起了被我遗忘了大半年的hexo博客，最后一次内容还停留在Golang学习中了解到的一个小算法，解封的记忆再度激发我将博客运营起来的想法。参考了很多大佬的博客内容方向后我发现博客加周刊的方式非常值得借鉴，于是我拆了hexo博客，用hugo重新开始。（不排除跟风的心思(￣_,￣ )）
总之，建立这个周刊一方面是前文动机提到的个人内容输出和自我表达的需求，另一方面希望通过这个周刊去加强自己的【输入】——信息获取、知识学习与归纳，以及【输入】——内容的总结，分享。（混蛋，明明能一句话说清楚的非要说这么长！）
为啥叫『一把裁纸刀』  让读书产生好处的最简单办法是，一旦有灵感和想法之后，马上写出来，公开发布在社交媒体上，即使不成熟也没关系。写的过程也是自己深度思考的一个步骤，外人的有价值评论可帮你不断推敲，或给你带来新的线索，积累多了自然会出深刻的洞见。一个人孤立封闭的傻读写笔记，很难迅速提高思考深度。—— [硅谷王川的微博]
 这个时代由于互联网的建立，人们处于巨量信息的包裹下，大脑会习惯性地获取兴趣导向的信息（多巴胺分泌），从而将自己的生活桎梏于像蚕茧一般的“茧房”中，也就是人们经常说的“信息茧房”的现象。我希望这个周刊像手边的裁制刀一样，既能从茧中切出一个接收新信息的入口，又能从外部的信息流中裁出真正有价值的信息以及交流的声音。
计划和内容 之前在V2上看过这样一个帖子：
程序员应该怎么写博客？ - V2EX
其中有四点内容值得我学习：
 1- Notion 不是博客。博客是公开成果的发表，Notion 是半公开性的记事本。
 无论是博客还是周刊都是公开发表的内容成果，需要对内容负责，不能像笔记一样随意。
 2-你发布的内容需要有参考性。别人看你博客，是因为能对他们带来帮助，多记录对别人有帮助的内容。
 内容的产出首先需要对自己有参考价值，如果能帮助到读者则更好
 3-固定经营几个话题。一定要向纵深去发表内容，切勿把博客搞成没有主题的大杂烩。
 内容的选题大方向和博客的风格要同一，需要垂直领域的深度内容挖掘，忌讳东一榔头西一棒槌的“大杂烩”
 4-博客有价值，长期写博客有巨大价值。
 长期的内容总结与输出不论对自己还是他人都有巨大价值，贵在坚持。
基于上面四点对『一把裁纸刀』做出以下定位：
 记录学习笔记 目前仍然处于学习阶段，产出的也是一些基础的学习笔记，原创度比较低，对他人产生价值接近与无；但是“不积硅步无以至千里”，终生学习，坚持整理。目前内容主要围绕计算机知识和音乐两个大类展开学习和记录。 技术深度文章 包括知识点底层原理的拆解、源码理解、底层知识技术的学习分析等。周刊暂时不会有此部分内容产出，但这是本周刊的创刊目的，未来可期。 资源分享 这一部分内容主要是一些工具、网站、信息、方法的分享，可能也有书籍、影视作品、游戏的分享。分享固然有价值，但不会以这部分内容为主。 平凡生活的碎碎念 人是社会性动物，生活中的些许趣事、琐事、无聊事，一些观点看法都会在这个周刊进行分享。  结语 我不是一个文笔很好的人，犹记得高考语文也是堪堪及格，周刊的建立一半是积蓄已久的输出欲，一半是拍了拍脑袋就干的一腔热血；同时我是一个很容易转移兴趣的人，但我希望这件事情和吉他一样能伴随我的人生。感谢能看到这里的你。希望这个周刊能给你带来些许价值和快乐！</description>
    </item>
    
    <item>
      <title>牛顿迭代法实现Sqrt函数</title>
      <link>https://lambent-tanuki-9903f7.netlify.app/post/%E7%89%9B%E9%A1%BF%E6%B3%95%E8%A7%A3%E6%96%B9%E7%A8%8B%E7%9A%84%E6%A0%B9/</link>
      <pubDate>Mon, 14 Mar 2022 11:54:29 +0800</pubDate>
      
      <guid>https://lambent-tanuki-9903f7.netlify.app/post/%E7%89%9B%E9%A1%BF%E6%B3%95%E8%A7%A3%E6%96%B9%E7%A8%8B%E7%9A%84%E6%A0%B9/</guid>
      <description>定义 牛顿迭代法（Newton&amp;rsquo;s method）又称为牛顿-拉夫逊方法（Newton-Raphson method），它是牛顿在17世纪提出的一种在实数域和复数域上近似求解方程的方法。多数方程不存在求根公式，因此求精确根非常困难，甚至不可能，从而寻找方程的近似根就显得特别重要。方法使用函数f(x)的泰勒级数的前面几项来寻找方程f(x) = 0的根。牛顿迭代法是求方程根的重要方法之一，其最大优点是在方程f(x) = 0的单根附近具有平方收敛，而且该法还可以用来求方程的重根、复根。另外该方法广泛用于计算机编程中（如：sqrt函数的实现））。
数学内涵 如何通俗易懂地讲解牛顿迭代法求开方（数值分析）？ - 知乎 (zhihu.com)
一句话解释 切线是曲线的线性逼近，所以将某个二阶可导的函数f(x)的求解转化为将该函数的切线方程的解并重复迭代求解，在无限次的迭代后会稳定在一个值，数学上称之为迭代收敛，这个值就便可看作原f(x)=0的根。（如下图A-D的过程）
代码应用(Golang实现sqrt) 对于求根的值，我们下面的 z² − x 是 z² 到它所要到达的值（即 x）的距离， 除以的 2z 为 z² 的导数，通过迭代即可实现sqrt（）， 随着迭代次数的增加可以提升sqrt函数的精度
var ( z float64 = 1.0 //起始点 	nbr int = 4 //迭代次数 ) func Sqrt(x float64, z float64, nbr int) float64 { for i := 1; i &amp;lt;= nbr; i++ { z -= (z*z - x) / (2 * z) } return z } </description>
    </item>
    
    <item>
      <title>夜に駆ける</title>
      <link>https://lambent-tanuki-9903f7.netlify.app/post/%E5%A4%9C%E3%81%AB%E9%A7%86%E3%81%91%E3%82%8B/</link>
      <pubDate>Thu, 10 Feb 2022 17:32:29 +0800</pubDate>
      
      <guid>https://lambent-tanuki-9903f7.netlify.app/post/%E5%A4%9C%E3%81%AB%E9%A7%86%E3%81%91%E3%82%8B/</guid>
      <description>引言 日本新生代人气组合「YOASOBI」凭借这首《夜に駆ける》在“Billboard Japan Hot 100”榜单中获得年度第一 ，并在日本公信榜单曲周合计排行榜上连续数周获得第一，流媒体播放次数突破2亿次。
「YOASOBI」这个组合建立之初的概念便是将小说和音乐结合，为一个一个的小说故事谱写对应的曲子。而《夜に駆ける》结合歌词初次听会错意为恋人直接的双向奔赴，但是真正的故事《[[タナトスの誘惑]]》却没有爱情故事该有的那么甜蜜。
一个反套路的爱与救赎的故事 “据说这个世界上存在两种人，对生活充满向往——被「爱神Eros」支配的人和充满对死的渴望——被「死神Thanatos」所支配的人。 世界上大多数人属于前者，但她毫无疑问是后者”
 注：塔纳托斯（Thanatos），是古希腊神话中的死神
 《[[タナトスの誘惑]]》讲述了一个想要自杀的女孩被一个男孩救下，两人因此结识，成为了无话不说的朋友，关系也逐渐升温。女孩的出现对于男孩寂寞的社畜生活仿佛天使的降临，但是成为朋友并没有改变女孩想自杀的想法，不过每次女孩自杀时都会给男孩发一条短信，然后在楼顶等待男生的到来。
8月15日这一天，男孩又收到了女孩自杀的短信。
“永别了”
虽然只是短短三个字，但男孩立马就明白了什么意思，下班之后向公寓奔去。令男孩觉得奇怪的是一个真的想死的人只会一声不吭的消失在这个世界上，为什么会给他发短信呢？“可能时某种求生信号吧&amp;hellip;”男孩这样想着还是爬上了公寓的天台。天台上女孩已经站在了防护栏之外，双眼空洞的望着外面。
这已经是她第四次打算自杀了。据说这个世界上存在两种人，对生活充满向往——被「爱神Eros」支配的人和充满对死的渴望——被「死神Thanatos」所支配的人。 世界上大多数人属于前者，但她毫无疑问是后者。这个空洞眼神在男孩初次和女孩相遇时便已经看到过。
“等等！”
男孩看着她单薄的背影大喊着，同时跨过了围栏挽住了她的手。手的触感和闷热的空气相反，冰冷异常。男孩看着女孩的脸，得到的回答只是冰冷的：“放开！”。 她说过被「Thanatos」所支配的人会看到死神。
“死神什么的根本不存在啊”
“为什么你就是不懂啊&amp;hellip;！”
“别再看什么死神了，看看我啊”
“不要&amp;hellip;！”
女孩想甩开男孩的手，但是男孩攥的更紧了。
“好痛…！”
“！抱歉&amp;hellip;”
男孩想拯救女孩，希望女孩看着自己相信自己，相互依靠的活下去。但是女孩并不这么想
“死神先生才不会做这样的事啊&amp;hellip;！”
“为什么&amp;hellip;”
为社么？男孩也在质问着自己，明明自己那么热烈的爱着女孩，为什么女孩还是想逃避这个世界？
“已经够了”
“&amp;hellip;”
“我已经很累了”
“我也受够了” 男孩心里想着 “我也很累了啊。”
“想要快点死去啊！”
“我也想要一了百了啊！”
当男孩大声地说出压抑在心底很久的话之后，女生笑了，抬起了头。
“你终于&amp;hellip;注意到了吗？”
“嗯&amp;hellip;终于明白了”
“真的吗&amp;hellip;？太好了”
这一刻男孩明白了为什么女孩总是在自杀的时候联系他，这么做并不时求救信号，而是希望和男孩一起逃离这个世界，对男孩来说自己的「Thanatos」原来一直是这个当时救下的女孩。
“那么，出发吧”
“嗯，走吧”
夏夜的微风吹来一丝凉意，两个人紧紧的牵起了双手，从这个世界逃离，融入了无边无际的夜空。
逃避虽可耻，但有用 加缪在《西西弗神话》中说过“真正严肃的哲学问题只有一个，那便是自杀。判断人生值不值得活等于回答哲学的根本问题。” 在资本主义昌盛发展的今天，人往往会被资本主义的符号秩序所异化。这种异化从上到下地倾轧着人们，越是向下越能感受到创伤性的痛苦。这当人们感受到这种痛苦时，有人想向上爬；有人默默忍受；有人停留原地；有人选择了死亡。死亡是勇敢的还是懦弱的，每个人说法不一样，但是痛苦是真实存在的。逃避虽可耻但有用，我只想要热烈的死去，因为不想被消费符号所定义自己，不想在标签中寻找自己的价值，有时候不曾感觉自己存活在这个世界上。
带我走吧。去哪里都好。 我们一起离开这无聊的世界。</description>
    </item>
    
    <item>
      <title>回文数</title>
      <link>https://lambent-tanuki-9903f7.netlify.app/post/%E5%9B%9E%E6%96%87%E6%95%B0/</link>
      <pubDate>Thu, 02 Dec 2021 17:50:11 +0000</pubDate>
      
      <guid>https://lambent-tanuki-9903f7.netlify.app/post/%E5%9B%9E%E6%96%87%E6%95%B0/</guid>
      <description>今天是 2021/12/2 看朋友圈有人说 “今天是千年一遇的爱的对称日 ” 想到了今天也是回文数日，复习一下回文数算法
回文数定义 设n是一任意自然数。若将n的各位数字反向排列所得自然数n1与n相等，则称n为一回文数。例如，若n=2002，则称n为一回文数，同理，65425852456也是回文数。
解决思路：头尾匹配，将字符串的头部位置和尾部位置匹配校验，下文使用数组装置字符串
回文数核心算法 //Core Algorithm bool judge(string str) { int len = str.length(); for(int i = 0 ; i &amp;lt; len/2 ;i++) { if(str[i]!=str[len-1-i]) return false; } return true; }; </description>
    </item>
    
  </channel>
</rss>
